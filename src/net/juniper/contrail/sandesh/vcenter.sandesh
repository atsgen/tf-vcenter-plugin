/* Every struct <name> will generate a class called <name>.java.
   
   Every request <name> will generate a skeleton file <name>.java, 
   and a skeleton HTTP presentation layer <name>HttpHandler.java. 
   
   Every response will generate a skeleton file called <name>.java. 
   User is responsible for populating with the actual values of the response.
*/

struct ApiServerInfo {
	1: string ipAddr;
	2: int port;
	3: bool state;
}

struct VCenterInfo {
	1: string vCenterUrl;
	2: bool connected;
}

struct VNetworkStats {
    1: int total (link="vNetworksTotal");
}

struct VCenterPlugin {
	1: bool master;
	2: bool pluginState;
	3: ApiServerInfo apiServerInfo;
	4: VCenterServerInfo vCenterServerInfo;
	5: VNetworkStats vNetworkStats;
}

/* all requests to "/" are handled here */
request sandesh VCenterPluginReq {
}

response sandesh VCenterPluginResp {
	1: struct VCenterPlugin info;
}

struct VirtualMachineInfo {
	1: string name;
	2: bool state;
	3: string esxiHost;
	4: string network;
}

struct VirtualMachineInterfaceInfo {
	1: string macAddress;
	2: string network;
	3: string virtualMachine;
	4: string ipAddress;
	5: bool poweredOn;
	6: bool addPort;
}

struct VirtualMachineInfo {
	1: string name;
	2: string esxiHost;
	3: list<VirtualMachineInterfaceInfo> vInterfaces;
	4: string vrouterIpAddress;
	5: String powerState;
	6: bool toolsRunningStatus;
}

struct VirtualNetworkInfo {
	1: string name;
	2: list<VirtualMachineInterfaceInfo> vInterfaces;
	3: int primaryVlanId;
	4: int isolatedVlanId;
	5: bool externalIpam;
	6: string subnetAddress;
	7: string subnetMask;
	8: string gatewayAddress;
}

request sandesh TaskWatchDogReq {
}

response sandesh TaskWatchDogResp {
	1: list<TaskInfo> tasks;
}

struct TaskInfo {
	1: String name;
	2: bool blocked;
	3: String startTime;
	4: String timeout;
    5: list<String> stackTrace;
}

request sandesh VNetworkListReq {
	1: optional bool total;
}

response sandesh VNetworkListResp {
	1: list<VNetworkInfo> vNetworks;
}
